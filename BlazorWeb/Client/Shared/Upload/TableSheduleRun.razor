@using BlazorWeb.Shared.Models
@using BlazorWeb.Shared.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient _http
@inject MyScopeService _mss

<div class="row g-3 bg-warning">
    <div class="col-md-6 col-lg-3">
        <label for="start-date" class="form-label">Start Date</label>
        <input id="start-date" type="date" 
               @bind="_model.Start"
               class="form-control" placeholder="Start Date" 
               aria-label="Start Date">
    </div>
    <div class="col-md-6 col-lg-3">
        <label for="start-time" class="form-label">Start Time</label>
        <input id="start-time" type="time" 
               @bind="_model.Start"
               class="form-control" placeholder="Start Time" 
               aria-label="Start Time">
    </div>
    <div class="col-md-6 col-lg-3">
        <label for="stop-date" class="form-label">Stop Date</label>
        <input id="stop-date" type="date" 
               @bind="_model.Finish"
               class="form-control" placeholder="Stop Date" 
               aria-label="Stop Date">
    </div>
    <div class="col-md-6 col-lg-3">
        <label for="stop-time" class="form-label">Stop Time</label>
        <input id="stop-time" type="time" 
               @bind="_model.Finish"
               class="form-control" placeholder="Stop Time" 
               aria-label="Stop Time">
    </div>
    <div class="col-6">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" 
                   @bind="_model.IsAveryDay"
                   id="every-day">
            <label class="form-check-label" for="every-day">
                Every Day
            </label>
        </div>
    </div>
    <div class="col-6">
        <button class="btn btn-outline-dark float-end"
                @onclick="Clear">Clear</button>
        <button class="btn btn-outline-success float-end me-2"
                @onclick="Save">Save</button>
    </div>
    <i>If the schedule is empty, "Run Rings" - instantly.</i>
</div>

@code {
    private App? _main;
    private ScheduleViewModel _model = new ScheduleViewModel();

    protected override async Task OnInitializedAsync()
    {
        _main = (App)_mss["App"];
        try
        {
            _model = (await _http.GetFromJsonAsync<ScheduleViewModel>("Schedule/GetSchedule"))!;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async void Clear()
    {
        _model = new ScheduleViewModel();
        try
        {
            await _http.GetAsync("Schedule/ClearSchedule");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async void Save()
    {
        if (_model.IsAveryDay && _model.Start.TimeOfDay >= _model.Finish.TimeOfDay)
        {
            _main?.PanelUploadChange(new BoolString
            {
                Value = $"If Every Day - Stop Time > Start Time Important!!",
                Flag = true
            });
            return;
        }
        try
        {
            await _http.PostAsJsonAsync("Schedule/SaveSchedule", _model);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
