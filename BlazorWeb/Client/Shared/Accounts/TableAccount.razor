@using BlazorWeb.Shared.Models
@using BlazorWeb.Shared.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorWeb.Client.Shared.Modal
@inject HttpClient _http
@inject MyScopeService _mss

@if (_model.List.Count > 0)
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Id</th>
            <th>UserName</th>
            <th>Sid</th>
            <th>Provider</th>
            <th>Title</th>
            <th>Active</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var p in _model.List)
        {
            <tr class="c-p">
                <td @onclick="@(() => Edit(p))">@p.Id</td>
                <td @onclick="@(() => Edit(p))">@p.UserName</td>
                <td @onclick="@(() => Edit(p))">@p.Sid</td>
                <td @onclick="@(() => Edit(p))">@p.Provider</td>
                <td @onclick="@(() => Edit(p))">@p.Title</td>
                <td>
                    <input type="checkbox" class="form-check-input"
                           @onchange="(e) => Activate(p)"
                           checked="@p.IsActive"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private App? _main;
    private AccountsViewModel _model = new AccountsViewModel();

    protected override async Task OnInitializedAsync()
    {
        _main = (App)_mss["App"];
        _main.ButtonAccountEditEvent += ButtonAccountEditEvent;
        await GetAccounts();
    }

    private async Task GetAccounts()
    {
        try
        {
            _model = await _http.GetFromJsonAsync<AccountsViewModel>("Accounts/GetAccounts") ?? throw new InvalidOperationException();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task Activate(AccountModel p)
    { 
        await _http.GetFromJsonAsync<bool>($"Accounts/Activate/?accountId={p.Id}");
        _main!.TablesAccountsPhonesChange(true);
    }

    private async void ButtonAccountEditEvent(bool data)
    {
        await GetAccounts();
        await InvokeAsync(StateHasChanged);
    }

    private void Edit(AccountModel p)
    {
        _main?.ModalAccountEditChange(p.Id);
    }
}
